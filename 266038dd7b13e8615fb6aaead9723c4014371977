{
  "comments": [
    {
      "key": {
        "uuid": "72bae30b_389189f8",
        "filename": "pkg/log/log_classic.go",
        "patchSetId": 6
      },
      "lineNbr": 82,
      "author": {
        "id": 1000107
      },
      "writtenOn": "2020-06-17T19:29:03Z",
      "side": 1,
      "message": "Shouldn\u0027t need to do this.  I believe `append(\u003cnil\u003e, value)` is valid.",
      "range": {
        "startLine": 80,
        "startChar": 1,
        "endLine": 82,
        "endChar": 2
      },
      "revId": "266038dd7b13e8615fb6aaead9723c4014371977",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e0da72b2_9b37c504",
        "filename": "pkg/log/log_classic.go",
        "patchSetId": 6
      },
      "lineNbr": 82,
      "author": {
        "id": 1000526
      },
      "writtenOn": "2020-06-18T07:00:27Z",
      "side": 1,
      "message": "Right. Changed this",
      "parentUuid": "72bae30b_389189f8",
      "range": {
        "startLine": 80,
        "startChar": 1,
        "endLine": 82,
        "endChar": 2
      },
      "revId": "266038dd7b13e8615fb6aaead9723c4014371977",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5d72580b_b693f150",
        "filename": "pkg/log/utils.go",
        "patchSetId": 6
      },
      "lineNbr": 60,
      "author": {
        "id": 1000107
      },
      "writtenOn": "2020-06-17T19:29:03Z",
      "side": 1,
      "message": "Is this connection established once \u0026 re-used?",
      "range": {
        "startLine": 59,
        "startChar": 60,
        "endLine": 60,
        "endChar": 55
      },
      "revId": "266038dd7b13e8615fb6aaead9723c4014371977",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "99964dcd_2f0e3d92",
        "filename": "pkg/log/utils.go",
        "patchSetId": 6
      },
      "lineNbr": 60,
      "author": {
        "id": 1000526
      },
      "writtenOn": "2020-06-18T07:00:27Z",
      "side": 1,
      "message": "No connection is established here because Jaeger clients sends spans over UDP in fire-and-forget manner. But, wrong IP address or invalid FQDN will cause issue",
      "parentUuid": "5d72580b_b693f150",
      "range": {
        "startLine": 59,
        "startChar": 60,
        "endLine": 60,
        "endChar": 55
      },
      "revId": "266038dd7b13e8615fb6aaead9723c4014371977",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e3ccc823_195c9a7a",
        "filename": "pkg/log/utils.go",
        "patchSetId": 6
      },
      "lineNbr": 72,
      "author": {
        "id": 1000107
      },
      "writtenOn": "2020-06-17T19:29:03Z",
      "side": 1,
      "message": "Is this just connecting to a localhost port as a backup?\n\nWould it make more sense to just fail fast in this case?",
      "range": {
        "startLine": 65,
        "startChar": 2,
        "endLine": 72,
        "endChar": 3
      },
      "revId": "266038dd7b13e8615fb6aaead9723c4014371977",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7f98e3ca_dcfce243",
        "filename": "pkg/log/utils.go",
        "patchSetId": 6
      },
      "lineNbr": 72,
      "author": {
        "id": 1000526
      },
      "writtenOn": "2020-06-18T07:00:27Z",
      "side": 1,
      "message": "Please refer to my comments above. Log correlation is driven by span propagation through the ctx; the attributes embedded in span/ctx are used by logging framework for adding fields into logs.\n\nYes, it is connecting to 127.0.0.1 as a backup. We cannot fail here because the span creation won\u0027t work when Jaeger Tracer is not created. This will lead to noop Span to be created by opentracing which will not carry any data and hence log correlation would also not work.",
      "parentUuid": "e3ccc823_195c9a7a",
      "range": {
        "startLine": 65,
        "startChar": 2,
        "endLine": 72,
        "endChar": 3
      },
      "revId": "266038dd7b13e8615fb6aaead9723c4014371977",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0f7f422a_ba7ea7cb",
        "filename": "pkg/log/utils.go",
        "patchSetId": 6
      },
      "lineNbr": 72,
      "author": {
        "id": 1000016
      },
      "writtenOn": "2020-06-18T21:15:51Z",
      "side": 1,
      "message": "My questions is, if we \"can\u0027t fail here\", then is it not more appropriate to panic? Then Kubernetes will restart, hopefully the DNS will work by then. IF not, K8s will keep restarting the pod until it succeeds.",
      "parentUuid": "7f98e3ca_dcfce243",
      "range": {
        "startLine": 65,
        "startChar": 2,
        "endLine": 72,
        "endChar": 3
      },
      "revId": "266038dd7b13e8615fb6aaead9723c4014371977",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "05c57962_14761cc4",
        "filename": "pkg/log/utils.go",
        "patchSetId": 6
      },
      "lineNbr": 72,
      "author": {
        "id": 1000526
      },
      "writtenOn": "2020-06-19T04:18:52Z",
      "side": 1,
      "message": "Not really. We cannot completely fail here because the tracing agent (whose DNS Lookup is being done) is not a essential infra component like etcd/kafka and voltha should still continue to work if tracing agent could not be reached. In kind-voltha setup, tracing agent will be deployed only when it is started with WITH_TRACING\u003dyes flag. When WITH_TRACING is no, tracing agent will not be deployed and this DNS lookup will fail. So, it does not make sense to retry again and again by failing the PoD.",
      "parentUuid": "0f7f422a_ba7ea7cb",
      "range": {
        "startLine": 65,
        "startChar": 2,
        "endLine": 72,
        "endChar": 3
      },
      "revId": "266038dd7b13e8615fb6aaead9723c4014371977",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    }
  ]
}