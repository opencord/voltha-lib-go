{
  "comments": [
    {
      "key": {
        "uuid": "73ea3ecf_ce7e75ec",
        "filename": "pkg/adapters/common/core_proxy.go",
        "patchSetId": 3
      },
      "lineNbr": 149,
      "author": {
        "id": 1000107
      },
      "writtenOn": "2020-06-15T19:20:11Z",
      "side": 1,
      "message": "This was passing a context.Background() before, even though ctx was available.\n\nIs there a process created here that might outlive the caller?  Does a new ctx need to be created and passed?\n\n(Several more like this.)",
      "range": {
        "startLine": 149,
        "startChar": 46,
        "endLine": 149,
        "endChar": 49
      },
      "revId": "3d8fd580d94b6bc3c74c27b7fa5d90319c69d0a5",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ab6a60be_7a007240",
        "filename": "pkg/adapters/common/core_proxy.go",
        "patchSetId": 3
      },
      "lineNbr": 149,
      "author": {
        "id": 1000526
      },
      "writtenOn": "2020-06-16T06:56:12Z",
      "side": 1,
      "message": "The context will not timeout unless there is a deadline associated with it. I don\u0027t think context passed to this method is enhanced with deadline/cancel method and hence it should be safe to use it in further call to InvokeRPC method.\n\nAlso, it is essential that we pass the context across the whole call flow from NBI Handler API calls up to etcd/kafka to get a stream of correlated logs printing the span embedded into the context. This context propagation is also needed across the kafka interface; so we will be also extending the kafka-inter-container-proxy code to marshal/unmarshal the span embedded in the context for its propagation across kafka.",
      "parentUuid": "73ea3ecf_ce7e75ec",
      "range": {
        "startLine": 149,
        "startChar": 46,
        "endLine": 149,
        "endChar": 49
      },
      "revId": "3d8fd580d94b6bc3c74c27b7fa5d90319c69d0a5",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "40ccb5a8_181b5db6",
        "filename": "pkg/adapters/common/core_proxy.go",
        "patchSetId": 3
      },
      "lineNbr": 149,
      "author": {
        "id": 1000107
      },
      "writtenOn": "2020-06-16T14:16:20Z",
      "side": 1,
      "message": "While I agree that the span must be passed on, this method was accepting a ctx specifically so that it could be canceled or time out.  Even if no timeout/cancellation is defined in the voltha-go code, the original grpc client (voltctl, ofagent, etc.) is expected to use a timeout.\n\nThis function previously worked with these timeouts, and should continue to support them.",
      "parentUuid": "ab6a60be_7a007240",
      "range": {
        "startLine": 149,
        "startChar": 46,
        "endLine": 149,
        "endChar": 49
      },
      "revId": "3d8fd580d94b6bc3c74c27b7fa5d90319c69d0a5",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c51e4571_b05dadea",
        "filename": "pkg/adapters/common/core_proxy.go",
        "patchSetId": 3
      },
      "lineNbr": 149,
      "author": {
        "id": 1000526
      },
      "writtenOn": "2020-06-16T14:58:07Z",
      "side": 1,
      "message": "Sorry, I am unable to follow you. Earlier, we were passing context.Background() to this method which does not involve any timeout/cancel function.\n\nPlease elaborate",
      "parentUuid": "40ccb5a8_181b5db6",
      "range": {
        "startLine": 149,
        "startChar": 46,
        "endLine": 149,
        "endChar": 49
      },
      "revId": "3d8fd580d94b6bc3c74c27b7fa5d90319c69d0a5",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "267d2472_6ead9920",
        "filename": "pkg/adapters/common/core_proxy.go",
        "patchSetId": 3
      },
      "lineNbr": 149,
      "author": {
        "id": 1000107
      },
      "writtenOn": "2020-06-16T15:52:39Z",
      "side": 1,
      "message": "For whatever reason, this method was given a new context instead of using the available ctx, i.e. - it should not be canceled if the available ctx is canceled.\n\nOn the other hand, the ctx\u0027s span should be passed through for logging, so the span should be pulled out of the old ctx, and a new ctx created with the span (or a sub-span).\n\nPassing the existing ctx and creating a new context are both incomplete solutions.",
      "parentUuid": "c51e4571_b05dadea",
      "range": {
        "startLine": 149,
        "startChar": 46,
        "endLine": 149,
        "endChar": 49
      },
      "revId": "3d8fd580d94b6bc3c74c27b7fa5d90319c69d0a5",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2241a9f4_8cbe9807",
        "filename": "pkg/adapters/common/core_proxy.go",
        "patchSetId": 3
      },
      "lineNbr": 149,
      "author": {
        "id": 1000526
      },
      "writtenOn": "2020-06-16T16:21:10Z",
      "side": 1,
      "message": "OK. Will use the same approach here. Get span from upstream Context and create a new Context enhanced with the span",
      "parentUuid": "267d2472_6ead9920",
      "range": {
        "startLine": 149,
        "startChar": 46,
        "endLine": 149,
        "endChar": 49
      },
      "revId": "3d8fd580d94b6bc3c74c27b7fa5d90319c69d0a5",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dce5d9d8_6d0ee7b1",
        "filename": "pkg/db/kvstore/etcdclient.go",
        "patchSetId": 3
      },
      "lineNbr": 187,
      "author": {
        "id": 1000107
      },
      "writtenOn": "2020-06-15T19:20:11Z",
      "side": 1,
      "message": "Must use a new context.",
      "range": {
        "startLine": 187,
        "startChar": 33,
        "endLine": 187,
        "endChar": 36
      },
      "revId": "3d8fd580d94b6bc3c74c27b7fa5d90319c69d0a5",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4d26be58_dbf41e91",
        "filename": "pkg/db/kvstore/etcdclient.go",
        "patchSetId": 3
      },
      "lineNbr": 187,
      "author": {
        "id": 1000675
      },
      "writtenOn": "2020-06-16T08:39:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "dce5d9d8_6d0ee7b1",
      "range": {
        "startLine": 187,
        "startChar": 33,
        "endLine": 187,
        "endChar": 36
      },
      "revId": "3d8fd580d94b6bc3c74c27b7fa5d90319c69d0a5",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "25c728bc_d7f4a0c9",
        "filename": "pkg/db/kvstore/etcdclient.go",
        "patchSetId": 3
      },
      "lineNbr": 195,
      "author": {
        "id": 1000107
      },
      "writtenOn": "2020-06-15T19:20:11Z",
      "side": 1,
      "message": "Was previously context.Background() even though ctx was available, does this need a new context?",
      "range": {
        "startLine": 194,
        "startChar": 15,
        "endLine": 195,
        "endChar": 25
      },
      "revId": "3d8fd580d94b6bc3c74c27b7fa5d90319c69d0a5",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4a8c38d5_f73793a5",
        "filename": "pkg/db/kvstore/etcdclient.go",
        "patchSetId": 3
      },
      "lineNbr": 195,
      "author": {
        "id": 1000675
      },
      "writtenOn": "2020-06-16T08:39:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "25c728bc_d7f4a0c9",
      "range": {
        "startLine": 194,
        "startChar": 15,
        "endLine": 195,
        "endChar": 25
      },
      "revId": "3d8fd580d94b6bc3c74c27b7fa5d90319c69d0a5",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "89531ea0_09af5020",
        "filename": "pkg/db/kvstore/etcdclient.go",
        "patchSetId": 3
      },
      "lineNbr": 463,
      "author": {
        "id": 1000107
      },
      "writtenOn": "2020-06-15T19:20:11Z",
      "side": 1,
      "message": "Was previously context.Background() even though ctx was available.  Does this need a new context?",
      "range": {
        "startLine": 463,
        "startChar": 19,
        "endLine": 463,
        "endChar": 22
      },
      "revId": "3d8fd580d94b6bc3c74c27b7fa5d90319c69d0a5",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a57f5ab3_eba47197",
        "filename": "pkg/db/kvstore/etcdclient.go",
        "patchSetId": 3
      },
      "lineNbr": 463,
      "author": {
        "id": 1000675
      },
      "writtenOn": "2020-06-16T08:39:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "89531ea0_09af5020",
      "range": {
        "startLine": 463,
        "startChar": 19,
        "endLine": 463,
        "endChar": 22
      },
      "revId": "3d8fd580d94b6bc3c74c27b7fa5d90319c69d0a5",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "667f55ae_87119095",
        "filename": "pkg/kafka/endpoint_manager.go",
        "patchSetId": 3
      },
      "lineNbr": 230,
      "author": {
        "id": 1000107
      },
      "writtenOn": "2020-06-15T19:20:11Z",
      "side": 1,
      "message": "Previously used context.Background(), does this need a new context?",
      "range": {
        "startLine": 230,
        "startChar": 31,
        "endLine": 230,
        "endChar": 34
      },
      "revId": "3d8fd580d94b6bc3c74c27b7fa5d90319c69d0a5",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fcad18b0_b81a0ad4",
        "filename": "pkg/kafka/endpoint_manager.go",
        "patchSetId": 3
      },
      "lineNbr": 230,
      "author": {
        "id": 1000526
      },
      "writtenOn": "2020-06-16T06:56:12Z",
      "side": 1,
      "message": "Yes, we need the ctx passed from upstream to pass to backend so that logs generated by backend also have span info thus clearly depicting which API call resulted into this backend operation",
      "parentUuid": "667f55ae_87119095",
      "range": {
        "startLine": 230,
        "startChar": 31,
        "endLine": 230,
        "endChar": 34
      },
      "revId": "3d8fd580d94b6bc3c74c27b7fa5d90319c69d0a5",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "10a43d0b_e9e6d73e",
        "filename": "pkg/kafka/endpoint_manager.go",
        "patchSetId": 3
      },
      "lineNbr": 230,
      "author": {
        "id": 1000107
      },
      "writtenOn": "2020-06-16T14:16:20Z",
      "side": 1,
      "message": "See previous comment: should assume that this was using context.Background() instead of accepting ctx for good reason.  Should generate a new ctx \u0026 pass the span to it.\n\nUnless there\u0027s been some discussion \u0026 agreement that this should be changed, a logging patch should not be altering cancellation behavior.",
      "parentUuid": "fcad18b0_b81a0ad4",
      "range": {
        "startLine": 230,
        "startChar": 31,
        "endLine": 230,
        "endChar": 34
      },
      "revId": "3d8fd580d94b6bc3c74c27b7fa5d90319c69d0a5",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3f63f9e0_1fde06a6",
        "filename": "pkg/kafka/endpoint_manager.go",
        "patchSetId": 3
      },
      "lineNbr": 230,
      "author": {
        "id": 1000526
      },
      "writtenOn": "2020-06-16T14:58:07Z",
      "side": 1,
      "message": "OK. We can use this approach. We will pass context.Background() in these etcd calls and and enhance it with span extracted from upstream context",
      "parentUuid": "10a43d0b_e9e6d73e",
      "range": {
        "startLine": 230,
        "startChar": 31,
        "endLine": 230,
        "endChar": 34
      },
      "revId": "3d8fd580d94b6bc3c74c27b7fa5d90319c69d0a5",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "615e4cd7_93d0cad6",
        "filename": "pkg/kafka/endpoint_manager.go",
        "patchSetId": 3
      },
      "lineNbr": 260,
      "author": {
        "id": 1000107
      },
      "writtenOn": "2020-06-15T19:20:11Z",
      "side": 1,
      "message": "Previously used context.Background(), does this need a new context?",
      "range": {
        "startLine": 260,
        "startChar": 30,
        "endLine": 260,
        "endChar": 33
      },
      "revId": "3d8fd580d94b6bc3c74c27b7fa5d90319c69d0a5",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cee30908_33c34e86",
        "filename": "pkg/kafka/endpoint_manager.go",
        "patchSetId": 3
      },
      "lineNbr": 260,
      "author": {
        "id": 1000526
      },
      "writtenOn": "2020-06-16T06:56:12Z",
      "side": 1,
      "message": "Yes, we need the ctx passed from upstream to pass to backend so that logs generated by backend also have span info thus clearly depicting which API call resulted into this backend operation",
      "parentUuid": "615e4cd7_93d0cad6",
      "range": {
        "startLine": 260,
        "startChar": 30,
        "endLine": 260,
        "endChar": 33
      },
      "revId": "3d8fd580d94b6bc3c74c27b7fa5d90319c69d0a5",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "31e7da12_765b79be",
        "filename": "pkg/kafka/endpoint_manager.go",
        "patchSetId": 3
      },
      "lineNbr": 260,
      "author": {
        "id": 1000107
      },
      "writtenOn": "2020-06-16T14:16:20Z",
      "side": 1,
      "message": "(See previous comment.)",
      "parentUuid": "cee30908_33c34e86",
      "range": {
        "startLine": 260,
        "startChar": 30,
        "endLine": 260,
        "endChar": 33
      },
      "revId": "3d8fd580d94b6bc3c74c27b7fa5d90319c69d0a5",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a540ec13_5fbed292",
        "filename": "pkg/kafka/endpoint_manager.go",
        "patchSetId": 3
      },
      "lineNbr": 260,
      "author": {
        "id": 1000526
      },
      "writtenOn": "2020-06-16T14:58:07Z",
      "side": 1,
      "message": "OK. Will do",
      "parentUuid": "31e7da12_765b79be",
      "range": {
        "startLine": 260,
        "startChar": 30,
        "endLine": 260,
        "endChar": 33
      },
      "revId": "3d8fd580d94b6bc3c74c27b7fa5d90319c69d0a5",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "437af84d_93910485",
        "filename": "pkg/probe/probe.go",
        "patchSetId": 3
      },
      "lineNbr": 236,
      "author": {
        "id": 1000107
      },
      "writtenOn": "2020-06-15T19:20:11Z",
      "side": 1,
      "message": "In cases where a new context is created (and does not contain a span), will the log call create a span \u0026 add it to the context?  Should it?\n\n(Alternatively, should create a new span for each new context.)  \n\nSeems like doing this automatically would be a nice convenience.",
      "range": {
        "startLine": 236,
        "startChar": 16,
        "endLine": 236,
        "endChar": 19
      },
      "revId": "3d8fd580d94b6bc3c74c27b7fa5d90319c69d0a5",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "53fdb2d8_1f77561a",
        "filename": "pkg/probe/probe.go",
        "patchSetId": 3
      },
      "lineNbr": 236,
      "author": {
        "id": 1000526
      },
      "writtenOn": "2020-06-16T06:56:12Z",
      "side": 1,
      "message": "No the logger does not add any span. It looks up for span associated with passed ctx and logs operation name and operation id from span as log fields. If no span is found associated with ctx, standard log statement will be generated without the operation name and operation id fields.",
      "parentUuid": "437af84d_93910485",
      "range": {
        "startLine": 236,
        "startChar": 16,
        "endLine": 236,
        "endChar": 19
      },
      "revId": "3d8fd580d94b6bc3c74c27b7fa5d90319c69d0a5",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "324289bb_b697c630",
        "filename": "pkg/probe/probe.go",
        "patchSetId": 3
      },
      "lineNbr": 236,
      "author": {
        "id": 1000107
      },
      "writtenOn": "2020-06-16T14:16:20Z",
      "side": 1,
      "message": "So in cases where a new context (`ctx :\u003d context.Background()`) is required, should a new span not be generated as well, to trace the internal request?",
      "parentUuid": "53fdb2d8_1f77561a",
      "range": {
        "startLine": 236,
        "startChar": 16,
        "endLine": 236,
        "endChar": 19
      },
      "revId": "3d8fd580d94b6bc3c74c27b7fa5d90319c69d0a5",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a6e6cda3_2a3dca10",
        "filename": "pkg/probe/probe.go",
        "patchSetId": 3
      },
      "lineNbr": 236,
      "author": {
        "id": 1000526
      },
      "writtenOn": "2020-06-16T14:58:07Z",
      "side": 1,
      "message": "To start with, we will cover only the execution flow related to external API calls. The idea of span is to trace the execution flow across voltha components and external API calls are most critical to cover.\n\nThe tracing of initial startup and various background maintenance flows will be done next; after 2.4 release.",
      "parentUuid": "324289bb_b697c630",
      "range": {
        "startLine": 236,
        "startChar": 16,
        "endLine": 236,
        "endChar": 19
      },
      "revId": "3d8fd580d94b6bc3c74c27b7fa5d90319c69d0a5",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c61ab53c_443cca96",
        "filename": "pkg/probe/probe.go",
        "patchSetId": 3
      },
      "lineNbr": 236,
      "author": {
        "id": 1000107
      },
      "writtenOn": "2020-06-16T15:52:39Z",
      "side": 1,
      "message": "It doesn\u0027t seem very difficult to support these cases, just a find \u0026 replace on any remaining `context.Background()`s.\n\nI suppose it\u0027s fine to do this later.",
      "parentUuid": "a6e6cda3_2a3dca10",
      "range": {
        "startLine": 236,
        "startChar": 16,
        "endLine": 236,
        "endChar": 19
      },
      "revId": "3d8fd580d94b6bc3c74c27b7fa5d90319c69d0a5",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    }
  ]
}