{
  "comments": [
    {
      "key": {
        "uuid": "196a4f83_6813cbdb",
        "filename": "pkg/log/utils.go",
        "patchSetId": 3
      },
      "lineNbr": 45,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2020-08-18T18:51:32Z",
      "side": 1,
      "message": "fwiw, the mutex could be done as \ntype LogFeaturesManager struct {\n        sync.Mutex\n        isTtacePubl ...\n\nthen the usage would be to just\n\nlfm :\u003d \u0026LogFeaturesManger{}\nlfm.Lock()",
      "range": {
        "startLine": 45,
        "startChar": 0,
        "endLine": 45,
        "endChar": 36
      },
      "revId": "bf53ff486fa1dee15d8397c2eab7f5dd4b63be17",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "60e480d2_4937008a",
        "filename": "pkg/log/utils.go",
        "patchSetId": 3
      },
      "lineNbr": 45,
      "author": {
        "id": 1000107
      },
      "writtenOn": "2020-08-18T19:11:42Z",
      "side": 1,
      "message": "Disagree in this case @David.  This would expose the Lock() / Unlock() methods to the caller, but they should only be called internally.\n\nNit: Variable can just be called \"lock\" or \"mutex\".  (variables can probably have much shorter names and still be sufficiently descriptive, since they are no longer global.)",
      "parentUuid": "196a4f83_6813cbdb",
      "range": {
        "startLine": 45,
        "startChar": 0,
        "endLine": 45,
        "endChar": 36
      },
      "revId": "bf53ff486fa1dee15d8397c2eab7f5dd4b63be17",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f023c591_9519d409",
        "filename": "pkg/log/utils.go",
        "patchSetId": 3
      },
      "lineNbr": 45,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2020-08-18T20:56:07Z",
      "side": 1,
      "message": "is LogFeaturesManager used outside this file/package? could it be private? if so then using sync.Mutex w/o a var would work. it seems its only purpose is to control access to this struct.",
      "parentUuid": "60e480d2_4937008a",
      "range": {
        "startLine": 45,
        "startChar": 0,
        "endLine": 45,
        "endChar": 36
      },
      "revId": "bf53ff486fa1dee15d8397c2eab7f5dd4b63be17",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f2909ac3_d52c8bff",
        "filename": "pkg/log/utils.go",
        "patchSetId": 3
      },
      "lineNbr": 45,
      "author": {
        "id": 1000526
      },
      "writtenOn": "2020-08-19T06:12:23Z",
      "side": 1,
      "message": "No, LogFeaturesManager is not used outside this file. Changed to put sync.Mutex as the first attribute and using lfm.Lock directly.",
      "parentUuid": "f023c591_9519d409",
      "range": {
        "startLine": 45,
        "startChar": 0,
        "endLine": 45,
        "endChar": 36
      },
      "revId": "bf53ff486fa1dee15d8397c2eab7f5dd4b63be17",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8c7b50d6_37510927",
        "filename": "pkg/log/utils.go",
        "patchSetId": 3
      },
      "lineNbr": 48,
      "author": {
        "id": 1000107
      },
      "writtenOn": "2020-08-18T19:11:42Z",
      "side": 1,
      "message": "Nit: If possible, consider using `const`, or making the variable name lowercase.",
      "revId": "bf53ff486fa1dee15d8397c2eab7f5dd4b63be17",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4123a3d9_2b6353fc",
        "filename": "pkg/log/utils.go",
        "patchSetId": 3
      },
      "lineNbr": 48,
      "author": {
        "id": 1000107
      },
      "writtenOn": "2020-08-18T19:19:26Z",
      "side": 1,
      "message": "Whoops, misread this somehow, thought it was uppercase.  nvm.",
      "parentUuid": "8c7b50d6_37510927",
      "revId": "bf53ff486fa1dee15d8397c2eab7f5dd4b63be17",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "913727b0_53ed40e8",
        "filename": "pkg/log/utils.go",
        "patchSetId": 3
      },
      "lineNbr": 98,
      "author": {
        "id": 1000107
      },
      "writtenOn": "2020-08-18T19:19:26Z",
      "side": 1,
      "message": "functions which need access to the global variable should be implemented on the LogFeaturesManager struct.\n\ni.e.:\n\nfunc (lfm *LogFeaturesManager) foo() {...}\n\nOtherwise there\u0027s not much encapsulation provided by the struct.\n\nCallers should either create their own instance of LogFeaturesManager, or call like package.GlobalVariable.Foo()",
      "range": {
        "startLine": 98,
        "startChar": 0,
        "endLine": 98,
        "endChar": 4
      },
      "revId": "bf53ff486fa1dee15d8397c2eab7f5dd4b63be17",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a17d0ab3_ffa6809a",
        "filename": "pkg/log/utils.go",
        "patchSetId": 3
      },
      "lineNbr": 98,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2020-08-18T21:28:39Z",
      "side": 1,
      "message": "I like the caller creating their own instance and calling through that over a global ...",
      "parentUuid": "913727b0_53ed40e8",
      "range": {
        "startLine": 98,
        "startChar": 0,
        "endLine": 98,
        "endChar": 4
      },
      "revId": "bf53ff486fa1dee15d8397c2eab7f5dd4b63be17",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "814b869a_099234ad",
        "filename": "pkg/log/utils.go",
        "patchSetId": 3
      },
      "lineNbr": 98,
      "author": {
        "id": 1000526
      },
      "writtenOn": "2020-08-19T06:12:23Z",
      "side": 1,
      "message": "I understand the concern but it is unavoidable to have Global methods in this file. All tracing and log correlation methods present in this file are being used across the codebase.\n\nThe best I can do is to create a getter method for Singleton LogFeaturesManager instance and make these Global methods part of LogFeaturesManager. But that would again need changes across the codebase wherever we are using CreateAsyncSpan(), WithSpanFromContext() methods.",
      "parentUuid": "a17d0ab3_ffa6809a",
      "range": {
        "startLine": 98,
        "startChar": 0,
        "endLine": 98,
        "endChar": 4
      },
      "revId": "bf53ff486fa1dee15d8397c2eab7f5dd4b63be17",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2e9d70e2_6c4ac62b",
        "filename": "pkg/log/utils.go",
        "patchSetId": 3
      },
      "lineNbr": 98,
      "author": {
        "id": 1000107
      },
      "writtenOn": "2020-08-19T15:40:59Z",
      "side": 1,
      "message": "Either having a getter for the singleton, or just allowing access to the global var directly, would be fine in my opinion.\n\nIn either case, still think these global methods should become part of LogFeaturesManager.  There\u0027s not much point avoiding the global vars if all the functions that use them are global anyways. (Currently we\u0027ve just moved the \"don\u0027t use globals\" issue up a level; better to treat LogFeaturesManager like it\u0027s not global, then create a singleton for it as a final step.)",
      "parentUuid": "814b869a_099234ad",
      "range": {
        "startLine": 98,
        "startChar": 0,
        "endLine": 98,
        "endChar": 4
      },
      "revId": "bf53ff486fa1dee15d8397c2eab7f5dd4b63be17",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4f1f31da_3e858960",
        "filename": "pkg/log/utils.go",
        "patchSetId": 3
      },
      "lineNbr": 98,
      "author": {
        "id": 1000526
      },
      "writtenOn": "2020-08-19T18:32:59Z",
      "side": 1,
      "message": "I feel the current approach to not export the LogFeaturesManager beyond the package seems more suitable. With only the Global method exposed, it is impossible to tweak with singleton instance of LogFeaturesManager and cause any un-intended operation.\n\nBy creating a Global Getter method for LogFeaturesManager and invoking same functions on it, I don\u0027t see any additional benefit unless we are planning to support creation of multiple LogFeaturesManager instances\n\n@David, any comment",
      "parentUuid": "2e9d70e2_6c4ac62b",
      "range": {
        "startLine": 98,
        "startChar": 0,
        "endLine": 98,
        "endChar": 4
      },
      "revId": "bf53ff486fa1dee15d8397c2eab7f5dd4b63be17",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8fba8765_85208406",
        "filename": "pkg/log/utils.go",
        "patchSetId": 3
      },
      "lineNbr": 98,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2020-08-20T17:18:20Z",
      "side": 1,
      "message": "I like the idea of encapsulating the functionality behind a LogFeatureManager type and then having the methods defined for that type. In general I am not in favor of global variables, even those not made public as i think it leads to difficulties in maintaining code long term.\n\nhave all required data as part of the methods receiver provides a nice clean encapsulation and also means that there is allocation of resource unless they are being used.\n\nIn terms of the singleton issue, I prefer the concept of a singleton to be based on factories to lookups as opposed to a global variable. In most cases I would prefer to not use a singleton, i.e. create the instance and then inject it into the functions that need it. This again keeps encapsulation clean, imo.\n\nThe argument above seems to indicate that replacing global methods with an allocated and injected LGM instance is at minimum complicated and maximum not possible without significant code churn. It may be possible to borrow a patterns from several Go packages in this case (e.g. flag is one of them).\n\nI can either call `flag.Parse` or create a parser instance and call `inst.Parse` on it. Essentially there is a default instance implicitly created, but i have the option of not using it and using instead creating an instance an injecting it where needed.",
      "parentUuid": "4f1f31da_3e858960",
      "range": {
        "startLine": 98,
        "startChar": 0,
        "endLine": 98,
        "endChar": 4
      },
      "revId": "bf53ff486fa1dee15d8397c2eab7f5dd4b63be17",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "94d54d50_3c118d9a",
        "filename": "pkg/log/utils.go",
        "patchSetId": 3
      },
      "lineNbr": 98,
      "author": {
        "id": 1000526
      },
      "writtenOn": "2020-08-20T17:46:32Z",
      "side": 1,
      "message": "Thanks David and Kent for your inputs. Based on your comments above, I will perform following set of changes to the approach:\n\n1. Make all relevant public methods part of LogFunctionManager\n2. Create a GetGlobalLFM() method to create and return a singleton instance.\n\nHope this way forward would be acceptable",
      "parentUuid": "8fba8765_85208406",
      "range": {
        "startLine": 98,
        "startChar": 0,
        "endLine": 98,
        "endChar": 4
      },
      "revId": "bf53ff486fa1dee15d8397c2eab7f5dd4b63be17",
      "serverId": "2a2bfe1b-c5c2-48ed-9ac8-16438ab24388",
      "unresolved": true
    }
  ]
}